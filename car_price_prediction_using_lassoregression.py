# -*- coding: utf-8 -*-
"""Car Price Prediction using Lassoregression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17frnHUOE8GeP68dDZu60aQc0YjrMLuLY
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

car_data=pd.read_csv("/content/car data.csv")

car_data.head()

car_data.shape

car_data.info()

car_data.isnull().sum()

print(car_data.Fuel_Type.value_counts())

print(car_data.Transmission.value_counts())

print(car_data.Seller_Type.value_counts())

car_data.replace({'Fuel_type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

car_data.replace({'Seller_type':{'Dealer':0,'Individual':1}},inplace=True)

car_data.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)
car_data.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
car_data.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

car_data.head()

X=car_data.drop(['Car_Name','Selling_Price'],axis=1)
Y=car_data['Selling_Price']

X_train,X_test,Y_train,Y_test = train_test_split(X, Y,test_size=0.1,random_state=2)

reg_model=LinearRegression()

reg_model.fit(X_train,Y_train)

training_data_prediction=reg_model.predict(X_train)

error=metrics.r2_score(Y_train,training_data_prediction)
print("R square error : ",error)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual vs Predicted prices")
plt.show()

testing_data_prediction=reg_model.predict(X_test)

error=metrics.r2_score(Y_test,testing_data_prediction)
print("R square error : ",error)

plt.scatter(Y_test,testing_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual vs Predicted prices")
plt.show()

Lasso_reg_model=Lasso()

Lasso_reg_model.fit(X_train,Y_train)

training_data_prediction=Lasso_reg_model.predict(X_train)

error=metrics.r2_score(Y_train,training_data_prediction)
print("R square error : ",error)

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual vs Predicted prices")
plt.show()

testing_data_prediction=Lasso_reg_model.predict(X_test)

error=metrics.r2_score(Y_test,testing_data_prediction)
print("R square error : ",error)

plt.scatter(Y_test,testing_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual vs Predicted prices")
plt.show()